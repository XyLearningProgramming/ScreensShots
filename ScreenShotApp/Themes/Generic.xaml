<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:localctrl="clr-namespace:ScreenShotApp.Controls">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/ScreenShotApp;component/Themes/ExtendedButton.xaml">
		</ResourceDictionary>
		<ResourceDictionary Source="pack://application:,,,/ScreenShotApp;component/Themes/ExtendedRadioButton.xaml">
		</ResourceDictionary>
		<ResourceDictionary Source="pack://application:,,,/ScreenShotApp;component/Themes/KeyBox.xaml">
		</ResourceDictionary>
		<ResourceDictionary Source="pack://application:,,,/ScreenShotApp;component/Themes/ExtendedTextBox.xaml">
		</ResourceDictionary>
		<ResourceDictionary Source="pack://application:,,,/ScreenShotApp;component/Themes/ExtendedCheckBox.xaml">
		</ResourceDictionary>
		<ResourceDictionary Source="pack://application:,,,/ScreenShotApp;component/Themes/IntegerBox.xaml">
		</ResourceDictionary>
	</ResourceDictionary.MergedDictionaries>
	<Style x:Key="Style.FocusVisual.NoMargin">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Border>
								<Rectangle Margin="0" SnapsToDevicePixels="True" Stroke="{DynamicResource Element.Foreground}" StrokeThickness="1" StrokeDashArray="1,2"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!--ScrollViewer-->
			<Style TargetType="{x:Type ScrollViewer}">
				<!--<Setter Property="PanningRatio" Value="0.01"/>
                <Setter Property="PanningDeceleration" Value="0.1"/>
                <Setter Property="CanContentScroll" Value="True"/>-->

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollViewer}">
							<Grid x:Name="Grid" Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="*"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>

								<ScrollContentPresenter Grid.Row="0" Grid.Column="0" x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" 
                                                        CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>

								<ScrollBar Grid.Row="0" Grid.Column="1" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow"
                                           Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" 
                                           Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>

								<Rectangle Grid.Row="1" Grid.Column="1" x:Name="Corner" Fill="{DynamicResource Element.Background.Back}"/>

								<ScrollBar Grid.Row="1" Grid.Column="0" x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" 
                                           Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                           Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="Corner" Property="Opacity" Value="0.6"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!--Expander styles-->
			<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Padding" Value="0"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" >
								<Grid SnapsToDevicePixels="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto"/>
										<RowDefinition Height="*"/>
										<RowDefinition Height="19"/>
									</Grid.RowDefinitions>

									<Label Grid.Row="0" Content="{TemplateBinding Content}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}"
                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>

									<Rectangle Grid.Row="1" x:Name="HorizontalRectangle" MinHeight="1" Fill="{DynamicResource Element.Border.Light}" 
                                               Height="Auto" HorizontalAlignment="Center" Margin="3,0,3,0"/>

									<Path Grid.Row="2" x:Name="ArrowPath" Data="M 1,1  L 4.5,4.5  L 1,8" HorizontalAlignment="Center" SnapsToDevicePixels="False" 
                                          Stroke="{DynamicResource Element.Glyph}" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Data" TargetName="ArrowPath" Value="M 4.5,1  L 1,4.5  L 4.5,8"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Cursor" Value="Hand"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Hover}"/>
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Hover}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Hover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Pressed}"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Focused}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Pressed}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Padding" Value="0"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" >
								<Grid SnapsToDevicePixels="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto"/>
										<RowDefinition Height="*"/>
										<RowDefinition Height="19"/>
									</Grid.RowDefinitions>

									<Label Grid.Row="0" Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"
                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>

									<Rectangle Grid.Row="1" x:Name="HorizontalRectangle" MinHeight="1" Fill="{DynamicResource Element.Border.Light}" 
                                               Height="Auto" HorizontalAlignment="Center" Margin="3,0,3,0"/>

									<Path Grid.Row="2" x:Name="ArrowPath" Data="M 4.5,1  L 1,4.5  L 4.5,8" HorizontalAlignment="Center" SnapsToDevicePixels="False" 
                                          Stroke="{DynamicResource Element.Glyph}" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Data" TargetName="ArrowPath" Value="M 1,1  L 4.5,4.5  L 1,8"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Cursor" Value="Hand"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Hover}"/>
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Hover}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Hover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Pressed}"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Focused}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Pressed}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Height" Value="27"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" >
								<Grid SnapsToDevicePixels="False">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto"/>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="19"/>
									</Grid.ColumnDefinitions>

									<Label Grid.Column="0" Content="{TemplateBinding Content}" Padding="3" Foreground="{TemplateBinding Foreground}"
                                           VerticalContentAlignment="Center"/>

									<Rectangle Grid.Column="1" x:Name="HorizontalRectangle" MinHeight="1" Fill="{DynamicResource Element.Border.Light}" 
                                               Height="Auto" VerticalAlignment="Center" Margin="3,0,3,0"/>

									<Path Grid.Column="2" x:Name="ArrowPath" Data="M 1,4.5 L 4.5,1 L 8,4.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" 
                                          Stroke="{DynamicResource Element.Glyph}" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Data" TargetName="ArrowPath" Value="M 1,1.5 L 4.5,5 L 8,1.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Cursor" Value="Hand"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Hover}"/>
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Hover}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Hover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Pressed}"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Focused}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Pressed}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" >
								<Grid SnapsToDevicePixels="False">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto"/>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="19"/>
									</Grid.ColumnDefinitions>

									<Label Grid.Column="0" Content="{TemplateBinding Content}" Padding="3" Foreground="{TemplateBinding Foreground}"
                                           VerticalContentAlignment="Center"/>

									<Rectangle Grid.Column="1" x:Name="HorizontalRectangle" MinHeight="1" Fill="{DynamicResource Element.Border.Light}" 
                                               Height="Auto" VerticalAlignment="Center" Margin="3,0,3,0"/>

									<Path Grid.Column="2" x:Name="ArrowPath" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="False" 
                                          Stroke="{DynamicResource Element.Glyph}" StrokeThickness="2" VerticalAlignment="Center"/>
								</Grid>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Data" TargetName="ArrowPath" Value="M 1,4.5 L 4.5,1 L 8,4.5"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Cursor" Value="Hand"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Hover}"/>
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Hover}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Hover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Stroke" TargetName="HorizontalRectangle" Value="{DynamicResource Element.Border.Pressed}"/>
									<Setter Property="Background" Value="{DynamicResource Element.Background.Focused}"/>
									<Setter Property="Stroke" TargetName="ArrowPath" Value="{DynamicResource Element.Glyph.Pressed}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style TargetType="{x:Type Expander}">
				<Setter Property="Foreground" Value="{DynamicResource Element.Foreground}"/>
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
				<Setter Property="VerticalContentAlignment" Value="Stretch"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="0"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Expander}">
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
								<DockPanel>
									<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                                  Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" 
                                                  FocusVisualStyle="{StaticResource Style.FocusVisual.NoMargin}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" 
                                                  FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0"
                                                  Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" 
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>

									<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                      Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
								</DockPanel>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded" Value="True">
									<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Right">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Up">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
								</Trigger>
								<Trigger Property="ExpandDirection" Value="Left">
									<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
									<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
									<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="HeaderSite" Property="Opacity" Value="0.6"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<!--Checkbox-->
			<!--ExtendedCheckBox Style-->
			<Style TargetType="{x:Type CheckBox}">
				<Setter Property="Background" Value="{DynamicResource Element.Background}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource Element.Border}"/>
				<Setter Property="Foreground" Value="{DynamicResource Element.Foreground.Medium}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="VerticalAlignment" Value="Center"/>
				<Setter Property="SnapsToDevicePixels" Value="True"/>
				<Setter Property="Padding" Value="4,0,0,0"/>
				<Setter Property="FocusVisualStyle" Value="{DynamicResource Style.FocusVisual.NoMargin}"/>

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type CheckBox}">
							<Grid x:Name="templateRoot" Background="Transparent">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>

								<Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
									<Grid x:Name="markGrid">
										<Path x:Name="optionMark" Data="F1 M 9.97498,.8 L 4.6983,9.09834  L 1,5.19331 L 1.27664,3.52165 L 4.255,6.08833 L 9.33331,1.288e-005 Z" Fill="{DynamicResource Element.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
										<Rectangle x:Name="indeterminateMark" Fill="{DynamicResource Element.Glyph}" Margin="2" Opacity="0"/>
									</Grid>
								</Border>

								<TextBlock Grid.Column="1" x:Name="MainTextBlock" Focusable="False" Margin="{TemplateBinding Padding}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="0,-1,0,0"
								   Text="{TemplateBinding Content}">
								</TextBlock>
							</Grid>

							<ControlTemplate.Triggers>
								<Trigger Property="HasContent" Value="True">
									<Setter Property="FocusVisualStyle">
										<Setter.Value>
											<Style>
												<Setter Property="Control.Template">
													<Setter.Value>
														<ControlTemplate>
															<Rectangle Margin="14,0,0,0" SnapsToDevicePixels="True" Stroke="{DynamicResource Element.Foreground}" StrokeThickness="1" StrokeDashArray="1 2"/>
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>
										</Setter.Value>
									</Setter>

									<Setter Property="Padding" Value="4,-1,0,0"/>
								</Trigger>
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource Element.Background.Hover}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Element.Border.Hover}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource Element.Glyph.Hover}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource Element.Glyph.Hover}"/>
								</Trigger>
								<Trigger Property="IsPressed" Value="True">
									<Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource Element.Background.Pressed}"/>
									<Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource Element.Border.Pressed}"/>
									<Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource Element.Glyph.Pressed}"/>
									<Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource Element.Glyph.Pressed}"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="True">
									<Setter Property="Opacity" TargetName="optionMark" Value="1"/>
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
								</Trigger>
								<Trigger Property="IsChecked" Value="{x:Null}">
									<Setter Property="Opacity" TargetName="optionMark" Value="0"/>
									<Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Opacity" Value="0.7"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
</ResourceDictionary>
