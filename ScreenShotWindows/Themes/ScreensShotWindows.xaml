<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ScreenShotWindows"
					xmlns:lconv="clr-namespace:ScreenShotWindows.Utils.Coverters"
					xmlns:ctrl="clr-namespace:ScreenShotWindows.Controls">
	<!--TODO: make this changeable via struct sending in when construct screenshot window-->
	<!--4*16% opacity in blend with black color-->
	<Color x:Key="DarkOpacityColor">#40000000</Color>
	<SolidColorBrush x:Key="DarkOpacityBrush" Color="{DynamicResource DarkOpacityColor}"></SolidColorBrush>
	<Style x:Key="MaskRectStyle" TargetType="{x:Type Rectangle}">
		<Setter Property="HorizontalAlignment" Value="Left"></Setter>
		<Setter Property="VerticalAlignment" Value="Top"></Setter>
		<Setter Property="Fill" Value="{DynamicResource DarkOpacityBrush}"></Setter>
		<!--Rect mask can not be treated as hit test target-->
		<Setter Property="IsHitTestVisible" Value="False"></Setter>
	</Style>

	<lconv:ScreenWindowStatusEmptyToFalse x:Key="ScreenWindowStatusEmptyToFalse"></lconv:ScreenWindowStatusEmptyToFalse>
	<!--TODO: make this changeable via struct sending in when construct screenshot window-->
	<Color x:Key="TargetAreaBorderColor">#FF7CFC00</Color>
	<SolidColorBrush x:Key="TargetAreaSolidBrush" Color="{DynamicResource TargetAreaBorderColor}"></SolidColorBrush>
	<Style x:Key="TargetAreaBorderStyle" TargetType="{x:Type Border}">
		<Setter Property="BorderThickness" Value="2"></Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource TargetAreaSolidBrush}"></Setter>
		<Setter Property="Background" Value="Transparent"></Setter>
		<Setter Property="IsHitTestVisible" Value="False"></Setter>
		<Setter Property="HorizontalAlignment" Value="Left"></Setter>
		<Setter Property="VerticalAlignment" Value="Top"></Setter>

		<Style.Triggers>
			<DataTrigger Binding="{Binding WindowStatus, Converter={StaticResource ScreenWindowStatusEmptyToFalse}}" Value="True">
				<Setter Property="BorderThickness" Value="1"></Setter>
			</DataTrigger>
			<DataTrigger Binding="{Binding WindowStatus, Converter={StaticResource ScreenWindowStatusEmptyToFalse}}" Value="True">
				<Setter Property="BorderThickness" Value="1"></Setter>
				<Setter Property="IsHitTestVisible" Value="True"></Setter>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ReferenceDotsDefaultStyle" TargetType="Rectangle">
		<Setter Property="Height" Value="5"/>
		<Setter Property="Width" Value="5"/>
		<Setter Property="Fill" Value="{DynamicResource TargetAreaSolidBrush}"/>
		<Setter Property="HorizontalAlignment" Value="Left"/>
		<Setter Property="VerticalAlignment" Value="Top"/>
		<Setter Property="Visibility" Value="Visible"/>
		<!--Reference dots only visible when drawing or selecting-->
		<!--<Style.Triggers>
			<DataTrigger Binding="{Binding IsSelecting}" Value="True">
				<Setter Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding IsDrawing}" Value="True">
				<Setter Property="Visibility" Value="Visible"/>
			</DataTrigger>
		</Style.Triggers>-->
	</Style>


	<lconv:ScreenWindowStatusIsSelectingToColllapseVisibility x:Key="ScreenWindowStatusIsSelectingToColllapseVisibility"></lconv:ScreenWindowStatusIsSelectingToColllapseVisibility>
	<lconv:SizeToStringConverter x:Key="SizeToStringConverter"></lconv:SizeToStringConverter>
	<Style x:Key="ScreenShotWindowStyle" TargetType="local:ScreensShotWindows">
		<!--LayoutRounding: When the UseLayoutRounding property for an element is true, all non-integral pixel values that are calculated during the Measure and Arrange passes are rounded to whole pixel values-->
		<Setter Property="UseLayoutRounding" Value="True"></Setter>
		<!--Make window transparent and covers all-->
		<Setter Property="WindowStyle" Value="None"></Setter>
		<Setter Property="Topmost" Value="True"></Setter>
		<Setter Property="ResizeMode" Value="NoResize"></Setter>
		<Setter Property="Background" Value="Transparent"></Setter>
		<Setter Property="IgnoreAltF4" Value="True"></Setter>
		<Setter Property="ShowInTaskManager" Value="False"></Setter>
		<Setter Property="Focusable" Value="True"></Setter>
		<Setter Property="Title" Value="SnapShotWindow"></Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="local:ScreensShotWindows">
					<!--Following content is rendered on top of everything and needs not measuring and arranging-->
					<AdornerDecorator>
						<Grid ClipToBounds="False">
							<!--Inkcanvas: a reflection of desktop snapshot. Since it's modifiable after screen capture through editing mode-->
							<InkCanvas x:Name="PART_Canvas" EditingMode="None" Background="Transparent"></InkCanvas>

							<Rectangle x:Name="PART_MaskAreaLeft" Style="{StaticResource MaskRectStyle}"/>
							<Rectangle x:Name="PART_MaskAreaRight" Style="{StaticResource MaskRectStyle}"/>
							<Rectangle x:Name="PART_MaskAreaBottom" Style="{StaticResource MaskRectStyle}"/>
							<Rectangle x:Name="PART_MaskAreaTop" Style="{StaticResource MaskRectStyle}"/>

							<!--TargetArea with a hint text and reference points-->
							<Border x:Name="PART_TargetArea"  ClipToBounds="False" Style="{StaticResource TargetAreaBorderStyle}">
								<local:GridWithSolidLines x:Name="PART_HintGrid" SnapsToDevicePixels="True" ClipToBounds="False"
												ShowCustomGridLines="{TemplateBinding IsPreviewShowingReferenceLines}" GridLineBrush="{DynamicResource TargetAreaSolidBrush}" 
												GridLineThickness="1" GridLinesVisibility="Both"
												>
									<Grid.RowDefinitions>
										<RowDefinition Height="*"></RowDefinition>
										<RowDefinition Height="*"></RowDefinition>
										<RowDefinition Height="*"></RowDefinition>
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"></ColumnDefinition>
										<ColumnDefinition Width="*"></ColumnDefinition>
										<ColumnDefinition Width="*"></ColumnDefinition>
									</Grid.ColumnDefinitions>
									<TextBlock Text="{Binding TargetAreaSize, Converter={StaticResource SizeToStringConverter}}" Grid.RowSpan="3" Grid.ColumnSpan="3"
														Foreground="White" FontSize="12"
														HorizontalAlignment="Left" VerticalAlignment="Top" Padding="8,2"
														/>
								</local:GridWithSolidLines>
								<!--Buttons on the second row-->
							</Border>
							<local:StackedButtonsUserControl x:Name="PART_StackedButtons"></local:StackedButtonsUserControl>

							<!--Magnifier-->
							<Border x:Name="PART_Magnifier" IsHitTestVisible="False"
									HorizontalAlignment="Left" VerticalAlignment="Top"  BorderThickness="2" CornerRadius="1" 
									Visibility="{Binding WindowStatus, Converter={StaticResource ScreenWindowStatusIsSelectingToColllapseVisibility}}">
								<Border.Effect>
									<DropShadowEffect BlurRadius="2" Opacity="0.2" Direction="-45" RenderingBias="Performance" ShadowDepth="3"/>
								</Border.Effect>
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto"></RowDefinition>
										<RowDefinition Height="Auto"></RowDefinition>
									</Grid.RowDefinitions>
									<Border Margin="0,0,0,3" x:Name="MagnifierGridBorder" Background="{Binding PreviewBrush}" BorderThickness="2" BorderBrush="White" Width="121" Height="121">
										<!--A cross shaped window draw on top of magnifier-->
										<local:GridWithSolidLines ShowCustomGridLines="True" GridLineBrush="{DynamicResource TargetAreaSolidBrush}" 
										GridLineThickness="1" GridLinesVisibility="Both" IsHitTestVisible="False">
											<Grid.RowDefinitions>
												<RowDefinition Height="*"></RowDefinition>
												<RowDefinition Height="*"></RowDefinition>
											</Grid.RowDefinitions>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*"></ColumnDefinition>
												<ColumnDefinition Width="*"></ColumnDefinition>
											</Grid.ColumnDefinitions>
										</local:GridWithSolidLines>
									</Border>
									<TextBlock Background="#9000" Grid.Row="1" Foreground="White" Padding="10,3,0,3" TextWrapping="Wrap" 
									MaxWidth="{Binding ElementName=MagnifierGridBorder, Path=Width}" VerticalAlignment="Center" Text="{Binding MagnifierHintText}"></TextBlock>

								</Grid>
							</Border>
						</Grid>
					</AdornerDecorator>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>